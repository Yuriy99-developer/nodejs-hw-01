import { createFakeContact } from "../utils/createFakeContact.js";
import { readContacts } from "../utils/readContacts.js";
import { writeContacts } from "../utils/writeContacts.js";

const generateContacts = async (count = 5) => {
    try {
        // 1Ô∏è‚É£ –ó—á–∏—Ç—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏
        const contacts = await readContacts();

        // 2Ô∏è‚É£ –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏
        const newContacts = Array.from({ length: count }, () => createFakeContact());

        // 3Ô∏è‚É£ –û–±'—î–¥–Ω—É—î–º–æ —Å—Ç–∞—Ä—ñ —Ç–∞ –Ω–æ–≤—ñ
        const updatedContacts = [...contacts, ...newContacts];

        // 4Ô∏è‚É£ –ó–∞–ø–∏—Å—É—î–º–æ –Ω–∞–∑–∞–¥ —É —Ñ–∞–π–ª
        await writeContacts(updatedContacts);

        console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ ${count} –Ω–æ–≤–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤!`);
        console.log(`üì¶ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤: ${updatedContacts.length}`);
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤:", error);
    }
};

// –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Ç–µ—Å—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 5 –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤)
generateContacts(5);
