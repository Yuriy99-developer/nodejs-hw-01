import { readContacts } from "../utils/readContacts.js";
import { writeContacts } from "../utils/writeContacts.js";

export const removeLastContact = async () => {
    try {
        // 1Ô∏è‚É£ –ó—á–∏—Ç—É—î–º–æ –Ω–∞—è–≤–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏
        const contacts = await readContacts();

        // 2Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç
        if (contacts.length === 0) {
            console.log("‚ö†Ô∏è –ù–µ–º–∞—î –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è!");
            return;
        }

        // 3Ô∏è‚É£ –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç
        const removedContact = contacts.pop();

        // 4Ô∏è‚É£ –ó–∞–ø–∏—Å—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –º–∞—Å–∏–≤ —É —Ñ–∞–π–ª
        await writeContacts(contacts);

        // 5Ô∏è‚É£ –í–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        console.log("üóëÔ∏è –û—Å—Ç–∞–Ω–Ω—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ!");
        console.log("‚ùå –í–∏–¥–∞–ª–µ–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç:", removedContact);
        console.log(`üì¶ –ó–∞–ª–∏—à–∏–ª–æ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤: ${contacts.length}`);
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É:", error);
    }
};

// –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
removeLastContact();